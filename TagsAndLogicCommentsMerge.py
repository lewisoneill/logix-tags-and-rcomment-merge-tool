import openpyxl
import sys

"""
TAG, ALIAS, COMMENT:
TYPE			SCOPE			NAME			DESCRIPTION		DATATYPE		SPECIFIER		ATTRIBUTES

RCOMMENT:
TYPE			SCOPE			ROUTINE			COMMENT			OWNING_ELEMENT	LOCATION
"""

FILE_COLUMNS = ['I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

files = sys.argv[1:]

if len(files) > 18:
	print('Cancelled: No more than 18 files can be processed at once.')
	sys.exit()

tags = []
aliases = []
comments = []
rcomments = []

for file in files:
	try:
		workbook = openpyxl.load_workbook(file)
	except FileNotFoundError as err:
		print(err)
	else:	
		worksheet = workbook.active
		for row in worksheet:
			if row[0].value == 'remark':
				pass
			elif row[0].value == 0.3:
				pass
			elif row[0].value == 'TYPE':
				pass
			elif row[0].value == 'TAG':
				tags.append((row, file))
			elif row[0].value == 'ALIAS':
				aliases.append((row, file))
			elif row[0].value == 'COMMENT':
				comments.append((row, file))
			elif row[0].value == 'RCOMMENT':
				rcomments.append((row, file))
			else:
				print('Unknown record type ' + str(row[0].value))

# Sort TAG and ALIASE records by NAME and SCOPE
tags.sort(key=lambda row_file_tuple: '' if row_file_tuple[0][1].value is None else row_file_tuple[0][1].value)
tags.sort(key=lambda row_file_tuple: row_file_tuple[0][2].value)
aliases.sort(key=lambda row_file_tuple: '' if row_file_tuple[0][1].value is None else row_file_tuple[0][1].value)
aliases.sort(key=lambda row_file_tuple: row_file_tuple[0][2].value)
# Sort COMMENT records by NAME and SPECIFIER and SCOPE
# list.sort() is guaranteed to be stable
comments.sort(key=lambda row_file_tuple: '' if row_file_tuple[0][1].value is None else row_file_tuple[0][1].value)
comments.sort(key=lambda row_file_tuple: row_file_tuple[0][5].value)
comments.sort(key=lambda row_file_tuple: row_file_tuple[0][2].value)
# Sort RCCOMMENT records by ROUTINE and LOCATION and SCOPE
# list.sort() is guaranteed to be stable
rcomments.sort(key=lambda row_file_tuple: '' if row_file_tuple[0][1].value is None else row_file_tuple[0][1].value)
rcomments.sort(key=lambda row_file_tuple: row_file_tuple[0][5].value)
rcomments.sort(key=lambda row_file_tuple: row_file_tuple[0][2].value)

# Give records with controller scope an SCOPE value of an empty string for creating record identifiers
#for row_file_tuple in tags, aliases, comments, rcomments:
#	if row_file_tuple[0][1].value is None:
#		row_file_tuple[0][1] = ''




def clear_and_fill_red(worksheet, row_number):
	if row_number != None:
		new_worksheet['D'+str(row_number)].value = None
		new_worksheet['D'+str(row_number)].fill = openpyxl.styles.PatternFill(fgColor=openpyxl.styles.colors.RED, fill_type=openpyxl.styles.fills.FILL_SOLID)


def combine_records(worksheet, row_file_tuples, create_record_identifier):	
	"""
	"""
	new_row_number = None
	previous_identifier = None
	record_found = [False for file in files] # set True if record is found for file

	for row_file_tuple in row_file_tuples:
		current_identifier = create_record_identifier(row_file_tuple[0])
		description = row_file_tuple[0][3].value

		if current_identifier != previous_identifier: # add new record
			# check all files had the previous record otherwise clear description (column 'D') cell and fill red
			if False in record_found:
				clear_and_fill_red(worksheet, new_row_number)

			record_found = [False for file in files] # reset records			

			worksheet.append((row_file_tuple[0][0].value,
								  row_file_tuple[0][1].value,
								  row_file_tuple[0][2].value,
								  description,
								  row_file_tuple[0][4].value,
								  row_file_tuple[0][5].value,
								  row_file_tuple[0][6].value))
			new_row_number = worksheet.max_row

		else: # record already added
			# if descriptions don't match clear description (column 'D') cell and fill red
			if description != worksheet['D'+str(new_row_number)].value:
				clear_and_fill_red(worksheet, new_row_number)

		i = files.index(row_file_tuple[1])
		if record_found[i]:
			print('Cancelled: ' + row_file_tuple[0][0].value + ' record ' + row_file_tuple[0][2].value + ' duplicated in file ' + row_file_tuple[1])  
			sys.exit()
		else:
			record_found[i] = True
		worksheet[FILE_COLUMNS[i]+str(new_row_number)] = description # add each file's description in its column

		previous_identifier = current_identifier




new_workbook = openpyxl.Workbook()
new_worksheet = new_workbook.active

new_worksheet['A1'] = 0.3 # version
new_worksheet['A2'] = 'remark'
new_worksheet['B2'] = 'Automatically generated by TagsAndLogicCommentsMerge.py'

# add file headers
for file in files:
	new_worksheet[FILE_COLUMNS[files.index(file)]+'3'] = file

new_worksheet['A3'] = 'TYPE'
new_worksheet['B3'] = 'SCOPE'
new_worksheet['C3'] = 'NAME'
new_worksheet['D3'] = 'DESCRIPTION'
new_worksheet['E3'] = 'DATATYPE'
new_worksheet['F3'] = 'SPECIFIER'
new_worksheet['G3'] = 'ATTRIBUTES'

combine_records(new_worksheet, tags + aliases, lambda row: ('' if row[1].value is None else row[1].value) + row[2].value)
combine_records(new_worksheet, comments, lambda row: ('' if row[1].value is None else row[1].value) + row[5].value)

new_row_string = str(new_worksheet.max_row + 1)

new_worksheet['A'+new_row_string] = 'TYPE'
new_worksheet['B'+new_row_string] = 'SCOPE'
new_worksheet['C'+new_row_string] = 'ROUTINE'
new_worksheet['D'+new_row_string] = 'COMMENT'
new_worksheet['E'+new_row_string] = 'OWNING_ELEMENT'
new_worksheet['F'+new_row_string] = 'LOCATION'

combine_records(new_worksheet, rcomments, lambda row: ('' if row[1].value is None else row[1].value) + row[2].value + str(row[5].value))

new_workbook.save("TagsAndLogicCommentsMerge.xlsx")